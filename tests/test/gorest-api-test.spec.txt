const { test, expect } = require('@playwright/test');
const ApiPageObject = require('../page/gorestObjectPAge');
const SchemaValidator = require('../utils/schemaValidator');
const userData = require('../../data/request_payloads/user.json');
let userId;
let apiPageObject;
const timestamp = Math.floor(Date.now() / 1000);


test.describe('GoRest API Positive testcases', () => {
  test.beforeAll(async ({ request  }) => {
    apiPageObject = new ApiPageObject(request );
    // Update the name and email with the timestamp so can create unique user can avoid duplicate  
    const uniqueUserData = {
      ...userData,
      name: `${userData.name} ${timestamp}`,             // Append timestamp to name
      email: `test.user.${timestamp}@example.com`        // Create a unique email
    };
    // Send a POST request
   const response = await apiPageObject.createUser(uniqueUserData.name, uniqueUserData.email, userData.gender, userData.status);
   const responseBody = response.json(); // Ensure responseBody is defined here
   userId = responseBody.id;
   //expect(response.status()).toBe(201);
   console.log("Details:"+ responseBody.name, responseBody.email, response.status());
  });

  test.afterAll(async ({request}) =>{
    if (userId) {
      const deleteResponse = await apiPageObject.sendDeleteRequest(userId); // Implement deleteUser method in ApiPageObject
      expect(deleteResponse.status()).toBe(200); // Ensure the deletion was successful
      console.log(`Deleted user with ID: ${userId}`);
    }
  });

  test.only('Verify posted data is matched with reposponce details', async ({ request }) =>{
    expect(userId).toBeDefined(); 
    console.log("id:"+ userId);
   const response = await apiPageObject.sendGetRequest(userId);
   const body = response.json(); 
   console("get", body. body.name, body.id, userId);

  });


});

